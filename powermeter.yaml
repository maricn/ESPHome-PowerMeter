substitutions:
  device_name: "smart-powermeter"
  friendly_name: "Smart Powermeter"
  project_name: "smart.powermeter"
  project_version: "2.0"
  ap_ssid: "Smart-Powermeter"
  ap_pwd: "smartpowermeter"

esphome:
  name: "${device_name}"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"
  platformio_options:
    upload_speed: 115200
  includes:
    - helpers.h

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password

#Public location of this yaml file
# dashboard_import:
  # package_import_url: github://JGAguado/Smart_Powermeter/docs/source/files/configuration.yaml@V2R2
  # import_full_config: true

# Enable fallback hotspot (captive portal) in case wifi connection fails
captive_portal:


improv_serial:

wifi:
  ap:
    ssid: "${ap_ssid}"
    password: "${ap_pwd}"
  manual_ip:
    static_ip: 192.168.178.163
    subnet: 255.255.255.0
    gateway: 192.168.178.1

time:
  - platform: homeassistant
    id: esptime

sensor:
  - platform: adc
    pin: GPIO1
    id: Input_1
    attenuation: 12db
    update_interval: 1s

  - platform: adc
    pin: GPIO2
    id: Input_2
    attenuation: 12db
    update_interval: 1s

  - platform: adc
    pin: GPIO3
    id: Input_3
    attenuation: 12db
    update_interval: 1s

  - platform: adc
    pin: GPIO4
    id: Input_4
    attenuation: 12db
    update_interval: 1s

  - platform: adc
    pin: GPIO5
    id: Input_5
    attenuation: 12db
    update_interval: 1s

  - platform: adc
    pin: GPIO6
    id: Input_6
    attenuation: 12db
    update_interval: 1s

  - platform: ct_clamp
    sensor: Input_1
    id: Circuit_1_5
    name: "Circuit 1..5"
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - delta: 0.02
      - calibrate_linear:
          - -0.05 -> 0
          - 0 -> 0
          - 0.013 -> 1.12
          - 0.015 -> 1.19
          - 0.096 -> 9.1

  - platform: ct_clamp
    sensor: Input_2  # not in use right now 2024-08-14T12:06:02+0200
    name: "Circuit 2"
    id: Circuit_2
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - delta: 0.02
      - calibrate_linear:
          - 0 -> 0
          - 1 -> 1

  - platform: ct_clamp
    sensor: Input_3
    name: "Circuit 3"
    id: Circuit_3
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - delta: 0.02
      - calibrate_linear:
          - 0 -> 0
          - 0.083 -> 8.15

  - platform: ct_clamp
    sensor: Input_4
    name: "Circuit 4"
    id: Circuit_4
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - delta: 0.02
      - calibrate_linear:
          - 0 -> 0
          - 0.007 -> 0.55
          - 0.009 -> 0.88
          - 0.017 -> 1.65

  - platform: ct_clamp
    sensor: Input_5
    name: "Circuit 5"
    id: Circuit_5
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - delta: 0.02
      - calibrate_linear:
          - 0 -> 0
          # expected values aggregated from other clamps (can't physically reach this one):
          - 0.001 -> 0.007
          - 0.010 -> 0.080
          - 0.100 -> 9.700

  - platform: template
    name: "Circuit 1..2"  # Derives the aggregated sum value of circuits 1 and 2 by deducting circuits 3,4,5 from the total measured value of 1..5
    id: Circuit_1_2
    lambda: |-
      return id(Circuit_1_5).state - id(Circuit_3).state - id(Circuit_4).state - id(Circuit_5).state;
    update_interval: 1s
    accuracy_decimals: 2

  - platform: ct_clamp
    sensor: Input_6
    name: "Circuit 6..10"
    id: Circuit_6_10
    sample_duration: 200ms
    update_interval: 1s
    filters:
      - delta: 0.02
      - calibrate_linear:
          - 0 -> 0
          - 0.008 -> 0.71
          - 0.120 -> 11.5

  - platform: total_daily_energy
    name: "Circuit 1..5 - Daily Power"
    power_id: Circuit_1_5
    id: daily_power_1_5
    unit_of_measurement: 'kWh'
    filters:
      - multiply: 0.23  # A -> kW: $x Ah * 230 Volts / 1000 kilo = 0.23 * $x kW

  - platform: total_daily_energy
    name: "Circuit 2 - Daily Power"
    power_id: Circuit_2
    id: daily_power_2
    unit_of_measurement: 'kWh'
    filters:
      - multiply: 0.23  # A -> kWh: $x A * 230 Volts / 1000 kilo = 0.23 * $x kW

  - platform: total_daily_energy
    name: "Circuit 3 - Daily Power"
    power_id: Circuit_3
    id: daily_power_3
    unit_of_measurement: 'kWh'
    filters:
      - multiply: 0.23  # A -> kWh: $x A * 230 Volts / 1000 kilo = 0.23 * $x kW

  - platform: total_daily_energy
    name: "Circuit 4 - Daily Power"
    power_id: Circuit_4
    id: daily_power_4
    unit_of_measurement: 'kWh'
    filters:
      - multiply: 0.23  # A -> kW: $x Ah * 230 Volts / 1000 kilo = 0.23 * $x kW

  - platform: total_daily_energy
    name: "Circuit 5 - Daily Power"
    power_id: Circuit_5
    id: daily_power_5
    unit_of_measurement: 'kWh'
    filters:
      - multiply: 0.23  # A -> kW: $x Ah * 230 Volts / 1000 kilo = 0.23 * $x kW

  - platform: total_daily_energy
    name: "Circuit 1..2 - Daily Power"
    power_id: Circuit_1_2
    id: daily_power_1_2
    unit_of_measurement: 'kWh'
    filters:
      - multiply: 0.23  # A -> kW: $x Ah * 230 Volts / 1000 kilo = 0.23 * $x kW

  - platform: total_daily_energy
    name: "Circuit 6..10 - Daily Power"
    power_id: Circuit_6_10
    id: daily_power_6_10
    unit_of_measurement: 'kWh'
    filters:
      - multiply: 0.23  # A -> kW: $x A * 230 Volts / 1000 kilo = 0.23 * $x kW

  - platform: template
    id: current_power_total
    name: "Measured Power"
    lambda: return (id(Circuit_1_5).state + id(Circuit_6_10).state) * 230.0 / 1000; #Power = Current * Voltage
    unit_of_measurement: 'kW'
    update_interval: 5s

  - platform: total_daily_energy
    name: "Total Daily Power"
    power_id: current_power_total
    id: daily_power_total

  # WiFi Signal
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifisignal
    update_interval: 20s

  # Homeassistant data
  - platform: homeassistant
    id: cost
    entity_id: sensor.total_daily_power_cost

font:
  - file: "gfonts://Audiowide"
    id: font_header
    size: 15
  - file: "gfonts://Audiowide"
    id: font_gauge
    size: 15
  - file: "gfonts://Audiowide"
    id: font_text
    size: 15
  - file: 'gfonts://Material+Symbols+Outlined'
    id: font_icon
    size: 18
    glyphs:
      - "\U0000f0b0" # wifi-strength-0
      - "\U0000ebe4" # wifi-strength-1
      - "\U0000ebd6" # wifi-strength-2
      - "\U0000ebe1" # wifi-strength-3
      - "\U0000e1d8" # wifi-strength-4
      - "\U000f05aa" # wifi-off

spi:
  clk_pin: GPIO12
  mosi_pin: GPIO11  # Works on the e-paper

image:
  - file: https://smart-powermeter.readthedocs.io/en/v2r2/_images/Gauge.png
    id: gauge
  - file: https://smart-powermeter.readthedocs.io/en/v2r2/_images/Gauge_1.png
    id: gauge_1
  - file: mdi:home-lightning-bolt
    id: power
    resize: 18x18
  - file: mdi:cash-multiple
    id: cash
    resize: 18x18
  - file: mdi:currency-eur
    id: euro
    resize: 18x18
  - file: mdi:lightning-bolt
    id: bolt
    resize: 22x22

display:
  - platform: waveshare_epaper
    cs_pin: GPIO10
    dc_pin: GPIO13
    busy_pin: GPIO14
    reset_pin: GPIO15
    model: 2.90inv2
    rotation: 270
    update_interval: 60s
    full_update_every: 1
    pages:
      - id: page1
        lambda: |-
          esphome::waveshare_epaper::WaveshareEPaper2P9InV2R2 *display = ((esphome::waveshare_epaper::WaveshareEPaper2P9InV2R2*)&it);

          drawHeader(display);
          for (int i = 1; i <= 6; i++) {
            drawInputGauge(display, i);
          }
          drawTotalPowerGauge(display);
          drawFooter(display);
